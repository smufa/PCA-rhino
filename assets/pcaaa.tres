[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeExpression" id=2]
size = Vector2( 553, 330 )
expression = "mat3 pca = mat3(row1, row2, vec3(0, 0, 0.1));
output0 = pca*input0;
"

[sub_resource type="VisualShaderNodeVec3Uniform" id=3]
uniform_name = "row1"
default_value_enabled = true
default_value = Vector3( 1, 0, 0 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=4]
uniform_name = "row2"
default_value_enabled = true
default_value = Vector3( 0, 1, 0 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform vec3 row1 = vec3(1.000000, 0.000000, 0.000000);
uniform vec3 row2 = vec3(0.000000, 1.000000, 0.000000);



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorUniform:4
	vec3 n_out4p0 = row1;

// VectorUniform:5
	vec3 n_out5p0 = row2;

// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		mat3 pca = mat3(n_out4p0, n_out5p0, vec3(0, 0, 0.1));
		n_out3p0 = pca*n_out2p0;
		
	}

// Output:0
	VERTEX = n_out3p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 74.9653, 26.2695 )
nodes/vertex/0/position = Vector2( 1020, 40 )
nodes/vertex/2/node = SubResource( 1 )
nodes/vertex/2/position = Vector2( 100, 100 )
nodes/vertex/3/node = SubResource( 2 )
nodes/vertex/3/position = Vector2( 360, 80 )
nodes/vertex/3/size = Vector2( 553, 330 )
nodes/vertex/3/input_ports = "0,1,input0;1,1,row1;2,1,row2;"
nodes/vertex/3/output_ports = "0,1,output0;"
nodes/vertex/3/expression = "mat3 pca = mat3(row1, row2, vec3(0, 0, 0.1));
output0 = pca*input0;
"
nodes/vertex/4/node = SubResource( 3 )
nodes/vertex/4/position = Vector2( -80, 420 )
nodes/vertex/5/node = SubResource( 4 )
nodes/vertex/5/position = Vector2( -160, 240 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 3, 1, 5, 0, 3, 2 )
nodes/fragment/0/position = Vector2( 640, 100 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( 260, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
